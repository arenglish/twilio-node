/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Proxy = require('../../Proxy');
import Response = require('../../../../http/response');
import serialize = require('../../../../base/serialize');
import { InteractionList } from './session/interaction';
import { ParticipantList } from './session/participant';
import { SerializableClass } from '../../../../interfaces';

type SessionStatus = 'in-progess'|'completed';

/**
 * @description Initialize the SessionList
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param version - Version of the resource
 * @param serviceSid - Service Sid.
 */
declare function SessionList(version: Proxy, serviceSid: string): SessionListInstance;

/**
 * Options to pass to update
 *
 * @property participants - The participants
 * @property status - The Status of this Session
 * @property ttl - How long will this session stay open, in seconds.
 * @property uniqueName - A unique, developer assigned name of this Session.
 */
interface SessionInstanceUpdateOptions {
  participants?: string[];
  status?: SessionStatus;
  ttl?: number;
  uniqueName?: string;
}

interface SessionListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): SessionContext;
  /**
   * create a SessionInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts?: SessionListInstanceCreateOptions, callback?: (error: Error | null, items: SessionListInstance) => any): Promise<SessionInstance>;
  /**
   * Streams SessionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: SessionListInstanceEachOptions, callback?: (item: SessionInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a session
   *
   * @param sid - A string that uniquely identifies this Session.
   */
  get(sid: string): SessionContext;
  /**
   * Retrieve a single target page of SessionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: SessionPage) => any): Promise<SessionPage>;
  /**
   * Lists SessionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: SessionListInstanceOptions, callback?: (error: Error | null, items: SessionInstance[]) => any): Promise<SessionInstance[]>;
  /**
   * Retrieve a single page of SessionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: SessionListInstancePageOptions, callback?: (error: Error | null, items: SessionPage) => any): Promise<SessionPage>;
}

/**
 * Options to pass to create
 *
 * @property participants - The participants
 * @property status - The Status of this Session
 * @property ttl - How long will this session stay open, in seconds.
 * @property uniqueName - A unique, developer assigned name of this Session.
 */
interface SessionListInstanceCreateOptions {
  participants?: string[];
  status?: SessionStatus;
  ttl?: number;
  uniqueName?: string;
}

/**
 * Options to pass to each
 *
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 * @property status - The Status of this Session
 * @property uniqueName - A unique, developer assigned name of this Session.
 */
interface SessionListInstanceEachOptions {
  callback?: (item: SessionInstance, done: (err?: Error) => void) => void;
  done?: Function;
  limit?: number;
  pageSize?: number;
  status?: SessionStatus;
  uniqueName?: string;
}

/**
 * Options to pass to list
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 * @property status - The Status of this Session
 * @property uniqueName - A unique, developer assigned name of this Session.
 */
interface SessionListInstanceOptions {
  limit?: number;
  pageSize?: number;
  status?: SessionStatus;
  uniqueName?: string;
}

/**
 * Options to pass to page
 *
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 * @property pageToken - PageToken provided by the API
 * @property status - The Status of this Session
 * @property uniqueName - A unique, developer assigned name of this Session.
 */
interface SessionListInstancePageOptions {
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
  status?: SessionStatus;
  uniqueName?: string;
}

interface SessionPayload extends SessionResource, Page.TwilioResponsePayload {
}

interface SessionResource {
  account_sid: string;
  date_created: Date;
  date_updated: Date;
  end_time: Date;
  links: string;
  service_sid: string;
  sid: string;
  start_time: Date;
  status: SessionStatus;
  ttl: number;
  unique_name: string;
  url: string;
}

interface SessionSolution {
  serviceSid?: string;
}


declare class SessionPage extends Page<Proxy, SessionPayload, SessionResource, SessionInstance> {
  /**
   * Initialize the SessionPagePLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Proxy, response: Response<string>, solution: SessionSolution);

  /**
   * Build an instance of SessionInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: SessionPayload): SessionInstance;
}


declare class SessionInstance extends SerializableClass {
  /**
   * Initialize the SessionContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @property sid - A string that uniquely identifies this Session.
   * @property serviceSid - Service Sid.
   * @property accountSid - Account Sid.
   * @property uniqueName - A unique, developer assigned name of this Session.
   * @property ttl - How long will this session stay open, in seconds.
   * @property status - The Status of this Session
   * @property startTime - The date this Session was started
   * @property endTime - The date this Session was ended
   * @property dateCreated - The date this Session was created
   * @property dateUpdated - The date this Session was updated
   * @property url - The URL of this Session.
   * @property links - Nested resource URLs.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - Service Sid.
   * @param sid - A string that uniquely identifies this Session.
   */
  constructor(version: Proxy, payload: SessionPayload, serviceSid: string, sid: string);

  private _proxy: SessionContext;
  accountSid: string;
  dateCreated: Date;
  dateUpdated: Date;
  endTime: Date;
  /**
   * fetch a SessionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: SessionInstance) => any): void;
  /**
   * Access the interactions
   */
  interactions();
  links: string;
  /**
   * Access the participants
   */
  participants();
  /**
   * remove a SessionInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: SessionInstance) => any): void;
  serviceSid: string;
  sid: string;
  startTime: Date;
  status: session.status;
  /**
   * Produce a plain JSON object version of the SessionInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON(): any;
  ttl: number;
  uniqueName: string;
  /**
   * update a SessionInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: SessionInstanceUpdateOptions, callback?: (error: Error | null, items: SessionInstance) => any): void;
  url: string;
}


declare class SessionContext {
  /**
   * Initialize the SessionContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @property interactions - interactions resource
   * @property participants - participants resource
   *
   * @param version - Version of the resource
   * @param serviceSid - Service Sid.
   * @param sid - A string that uniquely identifies this Session.
   */
  constructor(version: Proxy, serviceSid: string, sid: string);

  /**
   * fetch a SessionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: SessionInstance) => any): void;
  interactions?: Twilio.Preview.Proxy.ServiceContext.SessionContext.InteractionList;
  participants?: Twilio.Preview.Proxy.ServiceContext.SessionContext.ParticipantList;
  /**
   * remove a SessionInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: SessionInstance) => any): void;
  /**
   * update a SessionInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts?: SessionInstanceUpdateOptions, callback?: (error: Error | null, items: SessionInstance) => any): void;
}

export { SessionContext, SessionInstance, SessionList, SessionListInstance, SessionListInstanceCreateOptions, SessionListInstanceEachOptions, SessionListInstanceOptions, SessionListInstancePageOptions, SessionPage, SessionPayload, SessionResource, SessionSolution }
